# -*- coding: utf-8 -*-
"""
Created on Mon May  4 12:55:36 2015

@author: Talmo
"""

import sys
sys.path.append("../..")
from igc_pipeline import *
from tqdm import tqdm
from glob import glob
import pandas as pd
import numpy as np
from Bio.Seq import Seq

# From Cornish et al. (2014) -> MH_gene_COG.xls
samples = ["MH0001", "MH0002", "MH0002", "MH0002", "MH0003", "MH0004", "MH0006", "MH0006", "MH0006", "MH0006", "MH0006", "MH0006", "MH0006", "MH0006", "MH0006", "MH0006", "MH0006", "MH0006", "MH0006", "MH0006", "MH0006", "MH0006", "MH0006", "MH0007", "MH0007", "MH0007", "MH0007", "MH0008", "MH0009", "MH0009", "MH0009", "MH0009", "MH0009", "MH0009", "MH0009", "MH0009", "MH0011", "MH0011", "MH0011", "MH0011", "MH0011", "MH0011", "MH0011", "MH0011", "MH0011", "MH0011", "MH0011", "MH0011", "MH0011", "MH0011", "MH0011", "MH0011", "MH0011", "MH0011", "MH0011", "MH0011", "MH0012", "MH0012", "MH0012", "MH0012", "MH0012", "MH0012", "MH0012", "MH0012", "MH0012", "MH0012", "MH0012", "MH0012", "MH0012", "MH0012", "MH0012", "MH0012", "MH0012", "MH0012", "MH0012", "MH0012", "MH0012", "MH0012", "MH0012", "MH0012", "MH0012", "MH0012", "MH0012", "MH0012", "MH0012", "MH0012", "MH0012", "MH0012", "MH0012", "MH0012", "MH0012", "MH0012", "MH0012", "MH0012", "MH0012", "MH0012", "MH0012", "MH0012", "MH0012", "MH0012", "MH0012", "MH0012", "MH0012", "MH0012", "MH0012", "MH0012", "MH0012", "MH0012", "MH0012", "MH0012", "MH0012", "MH0012", "MH0012", "MH0012", "MH0012", "MH0012", "MH0013", "MH0013", "MH0013", "MH0014", "MH0014", "MH0014", "MH0014", "MH0016", "MH0016", "MH0016", "MH0016", "MH0016", "MH0016", "MH0016", "MH0016", "MH0016", "MH0016", "MH0016", "MH0016", "MH0016", "MH0017", "MH0017", "MH0017", "MH0017", "MH0017", "MH0017", "MH0019", "MH0019", "MH0019", "MH0019", "MH0019", "MH0019", "MH0019", "MH0019", "MH0020", "MH0020", "MH0020", "MH0020", "MH0020", "MH0020", "MH0020", "MH0020", "MH0020", "MH0020", "MH0020", "MH0020", "MH0020", "MH0020", "MH0020", "MH0020", "MH0020", "MH0020", "MH0020", "MH0020", "MH0020", "MH0021", "MH0021", "MH0021", "MH0021", "MH0021", "MH0021", "MH0021", "MH0021", "MH0021", "MH0021", "MH0021", "MH0021", "MH0022", "MH0022", "MH0022", "MH0024", "MH0024", "MH0024", "MH0024", "MH0024", "MH0024", "MH0024", "MH0025", "MH0025", "MH0025", "MH0025", "MH0025", "MH0025", "MH0025", "MH0025", "MH0025", "MH0025", "MH0025", "MH0025", "MH0025", "MH0025", "MH0025", "MH0025", "MH0025", "MH0025", "MH0025", "MH0025", "MH0025", "MH0025", "MH0025", "MH0026", "MH0026", "MH0026", "MH0026", "MH0026", "MH0026", "MH0026", "MH0026", "MH0026", "MH0030", "MH0030", "MH0030", "MH0031", "MH0031", "MH0031", "MH0031", "MH0031", "MH0031", "MH0031", "MH0031", "MH0033", "MH0033", "MH0033", "MH0033", "MH0033", "MH0033", "MH0033", "MH0033", "MH0035", "MH0035", "MH0035", "MH0035", "MH0035", "MH0035", "MH0035", "MH0035", "MH0035", "MH0035", "MH0035", "MH0035", "MH0037", "MH0037", "MH0037", "MH0038", "MH0038", "MH0038", "MH0039", "MH0039", "MH0039", "MH0039", "MH0040", "MH0040", "MH0040", "MH0040", "MH0040", "MH0043", "MH0043", "MH0043", "MH0045", "MH0045", "MH0045", "MH0047", "MH0047", "MH0048", "MH0048", "MH0048", "MH0048", "MH0048", "MH0050", "MH0050", "MH0050", "MH0051", "MH0053", "MH0053", "MH0053", "MH0053", "MH0053", "MH0053", "MH0054", "MH0054", "MH0055", "MH0055", "MH0056", "MH0059", "MH0059", "MH0060", "MH0060", "MH0060", "MH0060", "MH0060", "MH0061", "MH0062", "MH0063", "MH0063", "MH0063", "MH0063", "MH0064", "MH0064", "MH0064", "MH0064", "MH0064", "MH0064", "MH0065", "MH0065", "MH0065", "MH0065", "MH0065", "MH0065", "MH0065", "MH0065", "MH0065", "MH0065", "MH0065", "MH0065", "MH0065", "MH0065", "MH0065", "MH0065", "MH0065", "MH0065", "MH0065", "MH0065", "MH0065", "MH0065", "MH0065", "MH0066", "MH0066", "MH0066", "MH0066", "MH0066", "MH0069", "MH0069", "MH0070", "MH0070", "MH0070", "MH0070", "MH0070", "MH0070", "MH0070", "MH0070", "MH0070", "MH0070", "MH0070", "MH0070", "MH0070", "MH0070", "MH0071", "MH0071", "MH0071", "MH0071", "MH0071", "MH0071", "MH0071", "MH0071", "MH0073", "MH0073", "MH0073", "MH0074", "MH0074", "MH0074", "MH0074", "MH0074", "MH0074", "MH0074", "MH0075", "MH0075", "MH0075", "MH0075", "MH0075", "MH0075", "MH0077", "MH0077", "MH0077", "MH0077", "MH0077", "MH0077", "MH0077", "MH0077", "MH0077", "MH0077", "MH0077", "MH0077", "MH0077", "MH0077", "MH0077", "MH0077", "MH0077", "MH0077", "MH0079", "MH0079", "MH0079", "MH0079", "MH0079", "MH0079", "MH0080", "MH0080", "MH0080", "MH0080", "MH0080", "MH0081", "MH0081", "MH0081", "MH0081", "MH0081", "MH0081", "MH0081", "MH0082", "MH0082", "MH0082", "MH0082", "MH0082", "MH0082", "MH0082", "MH0082", "MH0082", "MH0083", "MH0084", "MH0084", "MH0084", "MH0084", "MH0086", "MH0086", "MH0086", "MH0086", "MH0086", "MH0086", "MH0086", "MH0086", "MH0086", "MH0086", "MH0086", "MH0086", "MH0086", "MH0086", "MH0086", "MH0086", "MH0086", "MH0086", "MH0086", "MH0086", "MH0086"]
sites = ["TCAAACATTTGTTCAA", "TCAAACGAATGTTCCA", "GCAAACAAATGTTTGA", "TAAAACTTTTGTTTGA", "TCAAACTAAAGTTCGT", "TGCAACATTTGTTCTA", "CCAAAGAGGTGTTCGA", "GAAAAAATGCGTTCTA", "CAAAACAAATGTTTGA", "TAGAACATTTGATATG", "GCGAACGTATGTTTGA", "ACAAACATTTGTTCCG", "AAGAACATCTGTTCTA", "TAGAAAAAAAGATCCA", "TCCAAAATTTGTGCGT", "GCAAACCTTTGTTCGG", "ACAAACAAATGTTCGG", "ACAAACGTACGTTCGA", "TCAATAAAGTGTTTGA", "ACGAACAAAGGTTCTA", "AGGAACGTATGTTCGA", "ACAAACATTTGTTCTA", "TCGAACAAATGGTTCC", "ACAAACACATGTTCGA", "ACAAACGATTGTTCGG", "ACGAACAAAATTTCGG", "GCAAACATATATTCCG", "AAAAACAAGCATTCGT", "ACAAACAAATGTTTGA", "ACAAACAAATGTTTGA", "TCGAACATTTATTCTT", "TAAAACTTTTGTTTGA", "ACGAACATCTGTGATA", "CCAAACAAGCGTTCCA", "TAGCATATATTTTTGC", "GCAAACAAATGTTTAT", "TCAAACAAAATTTTGC", "GCAAACATATGTTCGG", "TCGAGCAGCCGTTCGT", "GCAAACATATGTTCAC", "GCGAACATATGTTTGA", "TCGAACATATTTTCTT", "CCGTATATATGTTCGG", "TCAAACACTTGTTCGT", "ACATACGTTTGTTCGT", "ACAAACGTATGTGTCA", "TCGAACAAATTTTCGG", "ATAAACAAATGTTCGT", "ACAAACAGCTGTTCGT", "GCGAACATTTGTTACG", "CGGAATATACGTTTGC", "CCGAAGAAGTGTTCGA", "TCGAACGTACTTTCGA", "AGAAACATATGTTCGA", "TCGAACATACGGTTTC", "CGGAATGTATGTTTGC", "CCGAAAATCTATTTGC", "TCAAACAAATTTTTGG", "CAGAAAAAATATTTTT", "GTAAACAATTGTTCTG", "TCATATGTATGTTCGA", "GCAAACATTTGTTTTT", "TGGGACATATTTTCTT", "CCGAACACAGTTTTGC", "TCGAACATCTGTTCGA", "GCAAACGGATGTTCCG", "AGAAACAAATGTTTGA", "CCAAACAAGCGTTCCA", "ACGAACATCTGTGATA", "TAGCACATATGTTCTT", "GCAAACATTTGTTTTA", "GCAAACAAACGTTTGG", "TGAAACGTCTGTTCGC", "TAGCACAAATGTTCTT", "TCAAACATTTGTTCGT", "GCAAACAATCGTTTGC", "TCAAACATTTGTTTTA", "GCGAATGTATGTTTTG", "GGGAACGAATGTTTCT", "AAGAAAGTTTTTTTGG", "TCAAACAATTATTCGT", "ACGAACATAAGTATGT", "ACAAACATTTGTTTGA", "ACAAACAATTGTTCGT", "TAGAACATGTATCCAA", "TGCAACAACTGTTCGA", "ACGAAAGCTTGTGTTA", "TTGAAAAAAAGTTTTT", "CCGATCATTTTTTCCA", "AAGAAAAAACTTTTTT", "AAGAACATATGTTTGT", "TCGAACGTATTTTCTA", "CTAAACATTTGTTTGC", "TCAAACAATTGTTTAA", "ACAAAAAGATGTTTTG", "GCAAACATATATTCCG", "TCGAACATTTTTTCGG", "GCGAAAATATGTTCGG", "GCGAACAGCTGTTCTA", "CGCAACAGATGTTCGA", "CCGAACATATATTCAA", "GGGAACGTTTGTTCTT", "GCGAACATACATTCTT", "GCGAACATATTTTCTG", "GCAAACATATATTCAG", "GCAAACAAAAGTTCCG", "ACGAACATTTTTTCGG", "ACAAACATCTGTTCGG", "TCGAATATCTGTTCGA", "TCAAACAATTGTTTAT", "ACATATATTTGTTCGT", "TAGAATCATTTTTCGG", "GCGAACAAATGTTCCT", "GCGAATGTGTGTTCGG", "ACGAACATATTTTCGA", "GCAAACAAATGTTTGA", "TAGAACAGTTGTTGCC", "GCAAACATTTGTGCGC", "ACAAACAAACGTTCTG", "TAGAACAGATAATCAA", "CAAAACAAACGTTTGA", "TGGAAACTATGTTCGA", "CCAAACAAATGTTTGA", "TCGAAAACTTTTGCCT", "TCAAACAATTGTTTGA", "GCGAAAATATGTTCGA", "ACAAACATCTGTTCGG", "AGGAACATACGTTCTC", "GCAAACATATATTCCG", "TCGAACAAATTTTCGG", "TCAAACGCATATTCTG", "CGGAAACTATGTTCGG", "GTAAACAGTTGTTCGG", "CAGAATGTCTGTTTGG", "GCGAACAAATATTTGG", "GCAAACATATATTCCA", "GCAAACAAATGTTCTC", "ACGAATATATTTTCGA", "CCATACAAATGTTCGG", "ATGAACAACTGTTCGA", "TCAAACATTTGTTCAG", "ACGAACAATTATGTGC", "CTGAATTTATGTTCGA", "CAGAACATTTTTTCTG", "CTGAAAATACGTTTGC", "ACAAACATACGTTCAG", "CAAAACATCTGTTCGA", "TCGTACAAGTGTTCGA", "GCAAACGAATGTTCTG", "TAGCACATATGTTCTG", "ACAAAAAGATGTTTCA", "GAAAAAGAATGTTCTG", "CCGAACCAAATTTCGA", "GCAAACAGATGTTTTG", "AAGAACACATTTTCAG", "CAGAATATAAGTTTGC", "TTGAGTATATGTTCTA", "TCAAACAAATGTTTTT", "GAGAACAAATGTTCGT", "ACAAACATATGTTCTG", "GCAAACCTTTGTTCGA", "AGTAACATATGTTCGA", "CCGAAACTTTGTTCGA", "ACAAACAAATGTTCGA", "CAAAACAAATGTTCGA", "GAGAACACTTGTTTCC", "GTGAACTTTTGTTTGA", "TCGAATATAGATTCCC", "CCAAACATTTATTCTG", "TAGAACATATTTTCTG", "ACAAAAATATGTTCTG", "CCAAATTTATGTTTGA", "TCGAAAGGAGGTTTTC", "CGGAACAACTGTTCAT", "CCGAATAAATGTTCTG", "ACAAACAAATGTTCTT", "TCGAACATTTTTTCGG", "TCAAACAAATTTTCCG", "TCAAACAAGTGTTCTG", "ACAAACGCATGTTCTG", "CGGAAAATTTGTTCGA", "CCGAACATTTTTTCAG", "CAGAAATTATGTTTGC", "GTGAAAAAATATTCTA", "GCAAACAAATGTTTGC", "TAACACAAATGTTCTG", "TCAAACAAATGCTCTT", "GCAAACAAATGTTTGC", "CAGAACATCGTTTCTG", "GCGAAACTATGTTTTG", "ATGAACTTCTGTTTGA", "TAGAATAAATTTACGC", "AAGAACATATAGTCCC", "GCAAACAAATGTTTTG", "GCAAACAAAAGTTCCG", "TCGAACATTTTTTCGG", "ACAAACGGATGTTCGA", "ACGAACAAATTTTCGA", "ACAAACATACGTTCTT", "TCGAATATATGTTCAT", "GTGAACATTTGTTCTT", "ACAAACAAATGTTCGA", "GCGAACATGTGTTTGT", "ACGAACAAATTTTCGG", "CGGAATATACGTTTGC", "ACAAACACATGTTCGG", "ACAAACGATTGTTCGG", "ACGAACAAAATTTCGG", "GCAAACATATATTCCG", "GTGAACATATGTTAGA", "GCAAACACATATTCCG", "GCGAACAAATTTTCGG", "GGGAACATTCGTTTGT", "GCGAACATTTGTTTAT", "TAGAACAATGAATCGT", "AAGAAAATATTTTCTA", "TCAAACATTTGTGCAT", "TCGAACAAATGTTGGA", "ACGAACACTCGTTCTT", "CCGAACAGGCATTCTG", "ACGAACAAATTTTCGG", "CGGAATATACGTTTGC", "GCAAACAAATGTTCTA", "TCAAACAATTTATCGA", "TAGAAAAAATATTTAA", "AAGAACCTACATTCTG", "ACAAACACATATTCGT", "TCAAACGAATGTTCTC", "ACAAACAAATATTTGT", "TGAAACATTTGTTTGA", "TCGTACACTTGTTCGT", "CCGAACACGTTTTCTT", "GGGAACATTTGTTCTT", "TCGAACATGTATTCTG", "CCAAAAATATGTTCGA", "GCAAACATATATTCCA", "GCAAACGGTTGTTCGG", "GCAAACATATATTCCA", "CCAAAAATATGTTCGA", "TCGAACATGCATTCTG", "GGGAACATTTGTTCTT", "CCGAACACGTTTTCTT", "AAGAAAGCATTTTTTT", "TCGAAAAAATTTCCTA", "GCGAAATTATTTTCGT", "AAAAAAATTTTTTCTT", "TCAAACACTTTTTCGT", "AAAAACAAATGCTCTT", "AAGAACATATATTCTT", "GCAAACGTATATTCCA", "GCGAACAAATATTTGG", "TGAAACATTTGTTTGA", "ACAAATATATGTTCGT", "CAGAACAAATGTTCTT", "ACAAACACTTGTTCGT", "TCAAACAAATGTTCGA", "TCGAACAAATGTTGGA", "GAAAACAAACGTTTGA", "TGGAACAAATGTTGCA", "TCGAACATCTGTTGCA", "ACGAAAAAATTTTTAA", "GCAAACAAGTGTTCGT", "TGCAACATTTGTTCTA", "TCAAACATTTGTTTAA", "AAGAACTTTTATTCTT", "AGGAACAAAAATTCTT", "GCGAAAGTTTTTTTGC", "TAAAACTTTTGTTTGA", "CCAAAAATATGTTCGA", "GCAAACATATATTCCA", "TAAAACACTTGTTCTT", "ACAAACAAATGTTTGA", "TGCAACATATGTTCTA", "GCGAAATTATTTTCGT", "TAAAACATCTGTTCTT", "TCGAACAAATGTTGGA", "CCGAAACCATTTTCGT", "CCGAACACCTGTTTAT", "TCTATAATTTGTTCTA", "CCAAACATATGTTGCA", "GCAAACGTTCGTTCTT", "ACAAACAATTGTTCGG", "CCGAACATATTTTCGG", "CGGAATGTTTGTTTGC", "TCAAAAGAATTTTCTT", "TAGCACAAATGAACGA", "AAGAAAAATTGTGTTT", "GCAAACAAATGTTTGC", "GCACATGTATGTTCGA", "TCAAACGTTTGTTCTG", "TCAAACATTTGTGCAA", "AAGACCATTTTTTCGT", "TAACACATTTGTTCGG", "GCAAACATTTGTTTGG", "TTGAACGACTATTTGA", "TCGAACAAGAGGTCTT", "TAGAATATTAGTTTCA", "ACAAACTTCTGTTTGA", "TGCAACATTTGTTCTA", "ACGAACAAATGTTCTT", "TCAAACAAATGTTTAA", "CCGAACTTTTGTTCTT", "ACAAACATTTTTTCAT", "TCAAACAAATATTTGT", "ACGAATTAATGTTCGT", "TAAAACAATTATTTTA", "TCAAACCTTTTTTCTT", "CAAAACAAATGTTTGA", "TCGAACATATTTTCGG", "ACAAACACATGTTCGT", "CCGAACCTTTGTTCTG", "CGGAATGTATGTTTGC", "CAAAACACATTTTTGC", "CAGAAAGAAAGTTTGC", "TAGAATATATGGTTTA", "TCAAACAAATTTTTGA", "GCAAACAGATGTTCGC", "GGAAACATTTGTTTGC", "TCAAACAGATGTTCTT", "GCAAACACAAGTTCTT", "TAGTAAATGTTTTCTA", "TCAAACAAATGTTTAT", "CCAAATATTTGTTTTC", "TAGAAAGTAGTTTTGG", "TCGAACTTTTGTACCG", "AGGAACGAATGTTCGG", "GCGAACATATATTCTG", "CCAAATATTTGTTCGA", "GCAAACATATATTCCA", "GCAAACATATATTCCG", "ACGAACAAATTTTCGG", "ACAAACATTCGTTCTG", "CCAAACATTCGTTCTT", "TGGAAAATGTGTTCGA", "ACGTACATGTGTTTTA", "GCAAACAAATGTTTCG", "CGGAAAATTTGTTCGA", "CCGAACATTTATTCTA", "GCGAACAATCGTTTGT", "ATAAACCTATGTTCGA", "GAAAACAAATGTTCGC", "TCAAACAAATGTGCTA", "ACAAACACTCGTTCAT", "TAGAAAATCTGCTTGA", "CCGAACAATATTTCTG", "CAGAACTGCCGTTCGT", "TATAACATATGTGTGT", "AAAAACATACTTTTGG", "ACGAAAAAATTTTTAA", "CCGATCATATTTTCGT", "TAGAACAATTGCGCTA", "TCAAACAAATTTTTGA", "ACACAAATATGTTTGA", "ACGAACGATTATATGA", "TAGAAAATTTATTTAA", "AAGTACAATTATTCTA", "TAGAAGATACTTTTGC", "CCGAAGAAGTGTTCGA", "TCGAACGTACTTTCGA", "AGAAACATATGTTCGA", "TCGAACATACGGTTTC", "CGGAATGTATGTTTGC", "GCAAACAAATGTGCTA", "GCGAAATTATTTTCGT", "ACGAATTTATGTTCGT", "TCAAACATAATTTCGA", "TCTAACATTTTTTCTT", "AGTAACATATGTTCGA", "GCAAACCTTTGTTCGA", "ACAAACATTTGTTCGA", "TCGAACACACATTCGA", "TCAAACATATGTTCAA", "GCAAACATAAGTTCTC", "TAAAAAAAGGGTTTGA", "TTGAACACTTGATTGT", "AGTAACATATGTTCGA", "GCAAACCTTTGTTCGG", "ACAAACGTATGTTCTG", "GCGAACGTGTGTTCTC", "TAAAACGTATGTTCTG", "TCGTAAACAAGTTCTA", "ACGAACACTTGTTCTT", "GCGAATATTTGTTTGA", "ACGAACATTAGTATGT", "ACGAACATATATTCGG", "CCGAACTTTTGTTTGA", "ACAAACTTCTGTTTGA", "AAGATGATATGTTTGT", "GCAAACATATATTCGA", "ACAAACAAATGTTCGC", "GAGAACATTTGTTCTT", "ACGAACCTTTGTTCTG", "ACAAACATCTGTTCGC", "TCGAACAAATTTTCGG", "CGGAATGTATGTTTGC", "ACGAACAACTGTTCGT", "GTGAACAATTGTTCGT", "AGGAACATCTGTTCAC", "GCAAACAATTGTTTGA", "ACGAACAAATATTCGA", "TCAAACAGGTGTTCGT", "CCGAACATATTTTCGA", "CGGAATATTCGTTCGG", "GCAAACATATATTCCG", "TAGAACATGGGTCCCT", "ACAAACATTTGTTTGA", "TCAAACAAATGTTATT", "ACATATATTTGTTCGT", "CAAAACAATTGTTTTG", "GGAAACATTTGTTCGC", "ACAAATATATGTTCGA", "ACAAACGCGTGTTCGG", "CCGAATAAATGTTCGA", "CGGAACATTTATTTTG", "GCAAACAAATGTTCAA", "GGGAACATAAGTTTGA", "TCGAAAGGATGTGTTT", "TCAAACATTTTTGCGA", "TCAAACATTTGTTCAA", "GAGAAAATATATTCAT", "ACGAACAAACATTCGT", "TCAAACAATTGTTCGA", "ACAATCATTTGTTTGT", "GCAAACATAAGTTCTT", "GAAAACAAATGTTTGA", "TAAAAAATATGTGTTA", "TAGAACATTACTTTGT", "AAATACATTTGTTTGA", "CAAAACGTTTGTTCGT", "ACGAACATTATATCGC", "TCAAACGTTTTTATGA", "ACAAACATTTGTTCGT", "GCGAACATTTGTTCTT", "ACAAACATATGTTCTG", "GCAAACCTTTGTTCGG", "AGTAACATATGTTCGA", "TCGAACATCTGTTGCA", "GCAAACAAATGTTCAT", "TAAAACTAATGTTCGG", "ACGAACAAATGTTTTA", "GCGAACAAAGGTTCTA", "CTGAACTTGGGTTCGA", "GCAAACAGATATTCTG", "ACGAACATATTTTCAG", "TGGTACAATTGTTTGG", "GCAAACAAATATTCTC", "ACGAACATATTTTCGA", "GGGAACGTACGTTTGT", "AGGAACGTTTGTTCTT", "ACAAATTTTTGTTCTA", "TCAAACGTTTGTTCTG", "GCAAACAATTGTTTGT", "ACAAACAAATGTTCGC", "ACAAACGAATGTTCGA", "TCAAACGTTTGTTCTT", "TAGCACATGTGTTCTG", "CAAAAAAGATTTTCGC"]
hits = pd.DataFrame({"sample": samples, "site": sites})    
    
def find_sites(sample_sites):
    sample = sample_sites.name
    print sample
    
    # Find sites in promoters
    operons = get_operons(sample)
    find_site_in_promoter = lambda site: operons.index[operons.promoter_seq.map(lambda x: site in x or str(Seq(site).reverse_complement()) in x)].tolist()
    sample_sites["in_promoters"] = sample_sites["site"].map(find_site_in_promoter)
    
    # Find sites in scaftigs
    records = list(SeqIO.parse(get_sample_paths(sample)["scaftigs"], "fasta"))
    find_site_in_scaftig = lambda site: [record.id for record in records if site in record.seq or str(Seq(site).reverse_complement()) in record.seq]
    sample_sites["in_scaftigs"] = sample_sites["site"].map(find_site_in_scaftig)
    
    return sample_sites
    
# Search for sites per sample
grouped = hits.groupby("sample")
results = grouped.apply(find_sites)
print results